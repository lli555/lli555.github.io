<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ImagineCTF2024 on </title>
    <link>http://localhost:1313/tags/imaginectf2024/</link>
    <description>Recent content in ImagineCTF2024 on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/imaginectf2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ImagineCTF 2024 - journal</title>
      <link>http://localhost:1313/posts/imaginectf2024/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/imaginectf2024/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The initial set up of this challenge was allowing user to view different text files on the website. However, there existed a remote code execution vulnerability in the way that the web application was taking in the file path. Specifically, it used PHP&amp;rsquo;s &lt;code&gt;assert()&lt;/code&gt; function, which would evaluate a string as PHP code.&lt;/p&gt;&#xA;&lt;h2 id=&#34;approach&#34;&gt;Approach&lt;/h2&gt;&#xA;&lt;p&gt;When I first opened up the website and clicked on the different text files, I noticed that they were displayed using a url parameter &lt;code&gt;file&lt;/code&gt;. I then looked at the source code and found that the PHP file was using &lt;code&gt;$_GET&lt;/code&gt; to take in a url parameter.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
